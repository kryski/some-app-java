version: "3.9"
services:
  someappjava:
    container_name: someapp
    build:
      context: .
    command: sleeep 15
    ports:
      - 8080:8080
    depends_on:
      someappjava_db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      kafka:
        condition: service_started
    restart: unless-stopped

  someappjava_db:
    image: postgres:alpine
    container_name: postgresql
    restart: on-failure
    environment:
      - POSTGRES_DB=someapp
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      #- ./src/main/resources/sql/schema.sql:/docker-entrypoint-initdb.d/0-schema.sql:ro
      #- ./src/main/resources/sql/data.sql:/docker-entrypoint-initdb.d/1-data.sql:ro
    healthcheck:
      test: pg_isready -U postgres -d someapp
      interval: 10s
      timeout: 3s
      retries: 3

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '22181:2181'

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

volumes:
  postgres_data: